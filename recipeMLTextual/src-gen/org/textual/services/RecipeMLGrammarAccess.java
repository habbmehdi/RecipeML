/*
 * generated by Xtext 2.23.0
 */
package org.textual.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RecipeMLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RecipeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.textual.RecipeML.Recipe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecipeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cServesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cServesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cServesEIntParserRuleCall_4_0 = (RuleCall)cServesAssignment_4.eContents().get(0);
		private final Keyword cIngredientsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBaseingsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBaseingsBaseIngParserRuleCall_6_0 = (RuleCall)cBaseingsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cBaseingsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cBaseingsBaseIngParserRuleCall_7_1_0 = (RuleCall)cBaseingsAssignment_7_1.eContents().get(0);
		private final Keyword cInstructionsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMethodsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMethodsMethodParserRuleCall_9_0 = (RuleCall)cMethodsAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cMethodsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cMethodsMethodParserRuleCall_10_1_0 = (RuleCall)cMethodsAssignment_10_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Recipe:
		//	'Recipe : '
		//	name=EString
		//	'{'
		//	'serves' serves=EInt?
		//	'ingredients : ' baseings+=BaseIng ("," baseings+=BaseIng)*
		//	'instructions :' methods+=Method ("," methods+=Method)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Recipe : ' name=EString '{' 'serves' serves=EInt? 'ingredients : ' baseings+=BaseIng ("," baseings+=BaseIng)*
		//'instructions :' methods+=Method ("," methods+=Method)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Recipe : '
		public Keyword getRecipeKeyword_0() { return cRecipeKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'serves'
		public Keyword getServesKeyword_3() { return cServesKeyword_3; }
		
		//serves=EInt?
		public Assignment getServesAssignment_4() { return cServesAssignment_4; }
		
		//EInt
		public RuleCall getServesEIntParserRuleCall_4_0() { return cServesEIntParserRuleCall_4_0; }
		
		//'ingredients : '
		public Keyword getIngredientsKeyword_5() { return cIngredientsKeyword_5; }
		
		//baseings+=BaseIng
		public Assignment getBaseingsAssignment_6() { return cBaseingsAssignment_6; }
		
		//BaseIng
		public RuleCall getBaseingsBaseIngParserRuleCall_6_0() { return cBaseingsBaseIngParserRuleCall_6_0; }
		
		//("," baseings+=BaseIng)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//baseings+=BaseIng
		public Assignment getBaseingsAssignment_7_1() { return cBaseingsAssignment_7_1; }
		
		//BaseIng
		public RuleCall getBaseingsBaseIngParserRuleCall_7_1_0() { return cBaseingsBaseIngParserRuleCall_7_1_0; }
		
		//'instructions :'
		public Keyword getInstructionsKeyword_8() { return cInstructionsKeyword_8; }
		
		//methods+=Method
		public Assignment getMethodsAssignment_9() { return cMethodsAssignment_9; }
		
		//Method
		public RuleCall getMethodsMethodParserRuleCall_9_0() { return cMethodsMethodParserRuleCall_9_0; }
		
		//("," methods+=Method)*
		public Group getGroup_10() { return cGroup_10; }
		
		//","
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//methods+=Method
		public Assignment getMethodsAssignment_10_1() { return cMethodsAssignment_10_1; }
		
		//Method
		public RuleCall getMethodsMethodParserRuleCall_10_1_0() { return cMethodsMethodParserRuleCall_10_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class IngredientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.textual.RecipeML.Ingredient");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModIngParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBaseIngParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Ingredient:
		//	ModIng | BaseIng;
		@Override public ParserRule getRule() { return rule; }
		
		//ModIng | BaseIng
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ModIng
		public RuleCall getModIngParserRuleCall_0() { return cModIngParserRuleCall_0; }
		
		//BaseIng
		public RuleCall getBaseIngParserRuleCall_1() { return cBaseIngParserRuleCall_1; }
	}
	public class BaseIngElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.textual.RecipeML.BaseIng");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBaseIngAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBaseIngKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCountKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCountAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCountEFloatParserRuleCall_4_1_0 = (RuleCall)cCountAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUnitKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUnitAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_5_1_0 = (RuleCall)cUnitAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BaseIng:
		//	{BaseIng}
		//	'BaseIng'
		//	name=EString
		//	'{' ('count' count=EFloat)? ('unit' unit=EString)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BaseIng} 'BaseIng' name=EString '{' ('count' count=EFloat)? ('unit' unit=EString)? '}'
		public Group getGroup() { return cGroup; }
		
		//{BaseIng}
		public Action getBaseIngAction_0() { return cBaseIngAction_0; }
		
		//'BaseIng'
		public Keyword getBaseIngKeyword_1() { return cBaseIngKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('count' count=EFloat)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'count'
		public Keyword getCountKeyword_4_0() { return cCountKeyword_4_0; }
		
		//count=EFloat
		public Assignment getCountAssignment_4_1() { return cCountAssignment_4_1; }
		
		//EFloat
		public RuleCall getCountEFloatParserRuleCall_4_1_0() { return cCountEFloatParserRuleCall_4_1_0; }
		
		//('unit' unit=EString)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'unit'
		public Keyword getUnitKeyword_5_0() { return cUnitKeyword_5_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_5_1() { return cUnitAssignment_5_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_5_1_0() { return cUnitEStringParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.textual.RecipeML.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMethodKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cStepKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStepAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStepEIntParserRuleCall_2_1_0 = (RuleCall)cStepAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUsesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUsesAmountParserRuleCall_4_1_0 = (RuleCall)cUsesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cUsesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cUsesAmountParserRuleCall_4_2_1_0 = (RuleCall)cUsesAssignment_4_2_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cForKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTimeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTimeEIntParserRuleCall_5_1_0 = (RuleCall)cTimeAssignment_5_1.eContents().get(0);
		private final Keyword cMinutesKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cWeKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cObtainKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cCreatesAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cCreatesModIngParserRuleCall_6_4_0 = (RuleCall)cCreatesAssignment_6_4.eContents().get(0);
		private final Group cGroup_6_5 = (Group)cGroup_6.eContents().get(5);
		private final Keyword cCommaKeyword_6_5_0 = (Keyword)cGroup_6_5.eContents().get(0);
		private final Assignment cCreatesAssignment_6_5_1 = (Assignment)cGroup_6_5.eContents().get(1);
		private final RuleCall cCreatesModIngParserRuleCall_6_5_1_0 = (RuleCall)cCreatesAssignment_6_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		
		//Method:
		//	{Method}
		//	'Method' ('step' step=EInt ':')?
		//	name=EString ('-' uses+=Amount ("," uses+=Amount)* '-')? ('for' time=EInt 'minutes')? (':' '{' "we" "obtain"
		//	creates+=ModIng ("," creates+=ModIng)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Method} 'Method' ('step' step=EInt ':')? name=EString ('-' uses+=Amount ("," uses+=Amount)* '-')? ('for' time=EInt
		//'minutes')? (':' '{' "we" "obtain" creates+=ModIng ("," creates+=ModIng)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{Method}
		public Action getMethodAction_0() { return cMethodAction_0; }
		
		//'Method'
		public Keyword getMethodKeyword_1() { return cMethodKeyword_1; }
		
		//('step' step=EInt ':')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'step'
		public Keyword getStepKeyword_2_0() { return cStepKeyword_2_0; }
		
		//step=EInt
		public Assignment getStepAssignment_2_1() { return cStepAssignment_2_1; }
		
		//EInt
		public RuleCall getStepEIntParserRuleCall_2_1_0() { return cStepEIntParserRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('-' uses+=Amount ("," uses+=Amount)* '-')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_4_0() { return cHyphenMinusKeyword_4_0; }
		
		//uses+=Amount
		public Assignment getUsesAssignment_4_1() { return cUsesAssignment_4_1; }
		
		//Amount
		public RuleCall getUsesAmountParserRuleCall_4_1_0() { return cUsesAmountParserRuleCall_4_1_0; }
		
		//("," uses+=Amount)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//uses+=Amount
		public Assignment getUsesAssignment_4_2_1() { return cUsesAssignment_4_2_1; }
		
		//Amount
		public RuleCall getUsesAmountParserRuleCall_4_2_1_0() { return cUsesAmountParserRuleCall_4_2_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_4_3() { return cHyphenMinusKeyword_4_3; }
		
		//('for' time=EInt 'minutes')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'for'
		public Keyword getForKeyword_5_0() { return cForKeyword_5_0; }
		
		//time=EInt
		public Assignment getTimeAssignment_5_1() { return cTimeAssignment_5_1; }
		
		//EInt
		public RuleCall getTimeEIntParserRuleCall_5_1_0() { return cTimeEIntParserRuleCall_5_1_0; }
		
		//'minutes'
		public Keyword getMinutesKeyword_5_2() { return cMinutesKeyword_5_2; }
		
		//(':' '{' "we" "obtain" creates+=ModIng ("," creates+=ModIng)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//':'
		public Keyword getColonKeyword_6_0() { return cColonKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//"we"
		public Keyword getWeKeyword_6_2() { return cWeKeyword_6_2; }
		
		//"obtain"
		public Keyword getObtainKeyword_6_3() { return cObtainKeyword_6_3; }
		
		//creates+=ModIng
		public Assignment getCreatesAssignment_6_4() { return cCreatesAssignment_6_4; }
		
		//ModIng
		public RuleCall getCreatesModIngParserRuleCall_6_4_0() { return cCreatesModIngParserRuleCall_6_4_0; }
		
		//("," creates+=ModIng)*
		public Group getGroup_6_5() { return cGroup_6_5; }
		
		//","
		public Keyword getCommaKeyword_6_5_0() { return cCommaKeyword_6_5_0; }
		
		//creates+=ModIng
		public Assignment getCreatesAssignment_6_5_1() { return cCreatesAssignment_6_5_1; }
		
		//ModIng
		public RuleCall getCreatesModIngParserRuleCall_6_5_1_0() { return cCreatesModIngParserRuleCall_6_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_6() { return cRightCurlyBracketKeyword_6_6; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.textual.RecipeML.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.textual.RecipeML.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.textual.RecipeML.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat ecore::EFloat:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class AmountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.textual.RecipeML.Amount");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmountKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cQuantityAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cQuantityEFloatParserRuleCall_1_1_0 = (RuleCall)cQuantityAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUnitKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAmountofAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAmountofIngredientCrossReference_4_0 = (CrossReference)cAmountofAssignment_4.eContents().get(0);
		private final RuleCall cAmountofIngredientEStringParserRuleCall_4_0_1 = (RuleCall)cAmountofIngredientCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Amount:
		//	'{' ('amount' quantity=EFloat)? ('unit' unit=EString)?
		//	'of' amountof=[Ingredient|EString]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' ('amount' quantity=EFloat)? ('unit' unit=EString)? 'of' amountof=[Ingredient|EString] '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//('amount' quantity=EFloat)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'amount'
		public Keyword getAmountKeyword_1_0() { return cAmountKeyword_1_0; }
		
		//quantity=EFloat
		public Assignment getQuantityAssignment_1_1() { return cQuantityAssignment_1_1; }
		
		//EFloat
		public RuleCall getQuantityEFloatParserRuleCall_1_1_0() { return cQuantityEFloatParserRuleCall_1_1_0; }
		
		//('unit' unit=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'unit'
		public Keyword getUnitKeyword_2_0() { return cUnitKeyword_2_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_2_1_0() { return cUnitEStringParserRuleCall_2_1_0; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//amountof=[Ingredient|EString]
		public Assignment getAmountofAssignment_4() { return cAmountofAssignment_4; }
		
		//[Ingredient|EString]
		public CrossReference getAmountofIngredientCrossReference_4_0() { return cAmountofIngredientCrossReference_4_0; }
		
		//EString
		public RuleCall getAmountofIngredientEStringParserRuleCall_4_0_1() { return cAmountofIngredientEStringParserRuleCall_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ModIngElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.textual.RecipeML.ModIng");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModIngAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModIngKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCountKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCountAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCountEFloatParserRuleCall_4_1_0 = (RuleCall)cCountAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUnitKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUnitAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_5_1_0 = (RuleCall)cUnitAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ModIng:
		//	{ModIng}
		//	'ModIng'
		//	name=EString
		//	'{' ('count' count=EFloat)? ('unit' unit=EString)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ModIng} 'ModIng' name=EString '{' ('count' count=EFloat)? ('unit' unit=EString)? '}'
		public Group getGroup() { return cGroup; }
		
		//{ModIng}
		public Action getModIngAction_0() { return cModIngAction_0; }
		
		//'ModIng'
		public Keyword getModIngKeyword_1() { return cModIngKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('count' count=EFloat)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'count'
		public Keyword getCountKeyword_4_0() { return cCountKeyword_4_0; }
		
		//count=EFloat
		public Assignment getCountAssignment_4_1() { return cCountAssignment_4_1; }
		
		//EFloat
		public RuleCall getCountEFloatParserRuleCall_4_1_0() { return cCountEFloatParserRuleCall_4_1_0; }
		
		//('unit' unit=EString)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'unit'
		public Keyword getUnitKeyword_5_0() { return cUnitKeyword_5_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_5_1() { return cUnitAssignment_5_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_5_1_0() { return cUnitEStringParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	
	
	private final RecipeElements pRecipe;
	private final IngredientElements pIngredient;
	private final BaseIngElements pBaseIng;
	private final MethodElements pMethod;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final EFloatElements pEFloat;
	private final AmountElements pAmount;
	private final ModIngElements pModIng;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RecipeMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRecipe = new RecipeElements();
		this.pIngredient = new IngredientElements();
		this.pBaseIng = new BaseIngElements();
		this.pMethod = new MethodElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pEFloat = new EFloatElements();
		this.pAmount = new AmountElements();
		this.pModIng = new ModIngElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.textual.RecipeML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Recipe:
	//	'Recipe : '
	//	name=EString
	//	'{'
	//	'serves' serves=EInt?
	//	'ingredients : ' baseings+=BaseIng ("," baseings+=BaseIng)*
	//	'instructions :' methods+=Method ("," methods+=Method)*
	//	'}';
	public RecipeElements getRecipeAccess() {
		return pRecipe;
	}
	
	public ParserRule getRecipeRule() {
		return getRecipeAccess().getRule();
	}
	
	//Ingredient:
	//	ModIng | BaseIng;
	public IngredientElements getIngredientAccess() {
		return pIngredient;
	}
	
	public ParserRule getIngredientRule() {
		return getIngredientAccess().getRule();
	}
	
	//BaseIng:
	//	{BaseIng}
	//	'BaseIng'
	//	name=EString
	//	'{' ('count' count=EFloat)? ('unit' unit=EString)?
	//	'}';
	public BaseIngElements getBaseIngAccess() {
		return pBaseIng;
	}
	
	public ParserRule getBaseIngRule() {
		return getBaseIngAccess().getRule();
	}
	
	//Method:
	//	{Method}
	//	'Method' ('step' step=EInt ':')?
	//	name=EString ('-' uses+=Amount ("," uses+=Amount)* '-')? ('for' time=EInt 'minutes')? (':' '{' "we" "obtain"
	//	creates+=ModIng ("," creates+=ModIng)* '}')?;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EFloat ecore::EFloat:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//Amount:
	//	'{' ('amount' quantity=EFloat)? ('unit' unit=EString)?
	//	'of' amountof=[Ingredient|EString]
	//	'}';
	public AmountElements getAmountAccess() {
		return pAmount;
	}
	
	public ParserRule getAmountRule() {
		return getAmountAccess().getRule();
	}
	
	//ModIng:
	//	{ModIng}
	//	'ModIng'
	//	name=EString
	//	'{' ('count' count=EFloat)? ('unit' unit=EString)?
	//	'}';
	public ModIngElements getModIngAccess() {
		return pModIng;
	}
	
	public ParserRule getModIngRule() {
		return getModIngAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
