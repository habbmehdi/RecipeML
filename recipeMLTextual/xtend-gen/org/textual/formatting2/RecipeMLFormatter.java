/**
 * generated by Xtext 2.23.0
 */
package org.textual.formatting2;

import RecipeML.Amount;
import RecipeML.BaseIng;
import RecipeML.Method;
import RecipeML.ModIng;
import RecipeML.Recipe;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.textual.services.RecipeMLGrammarAccess;

@SuppressWarnings("all")
public class RecipeMLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RecipeMLGrammarAccess _recipeMLGrammarAccess;
  
  protected void _format(final Recipe recipe, @Extension final IFormattableDocument document) {
    EList<BaseIng> _baseings = recipe.getBaseings();
    for (final BaseIng baseIng : _baseings) {
      document.<BaseIng>format(baseIng);
    }
    EList<Method> _methods = recipe.getMethods();
    for (final Method method : _methods) {
      document.<Method>format(method);
    }
  }
  
  protected void _format(final Method method, @Extension final IFormattableDocument document) {
    EList<Amount> _uses = method.getUses();
    for (final Amount amount : _uses) {
      document.<Amount>format(amount);
    }
    EList<ModIng> _creates = method.getCreates();
    for (final ModIng modIng : _creates) {
      document.<ModIng>format(modIng);
    }
  }
  
  public void format(final Object method, final IFormattableDocument document) {
    if (method instanceof XtextResource) {
      _format((XtextResource)method, document);
      return;
    } else if (method instanceof Method) {
      _format((Method)method, document);
      return;
    } else if (method instanceof Recipe) {
      _format((Recipe)method, document);
      return;
    } else if (method instanceof EObject) {
      _format((EObject)method, document);
      return;
    } else if (method == null) {
      _format((Void)null, document);
      return;
    } else if (method != null) {
      _format(method, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(method, document).toString());
    }
  }
}
