/*
 * generated by Xtext 2.23.0
 */
package org.example.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PantryTextualGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class PantryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.PantryTextual.Pantry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPantryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIngredientAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIngredientIngredientParserRuleCall_1_0 = (RuleCall)cIngredientAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIngredientAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIngredientIngredientParserRuleCall_2_1_0 = (RuleCall)cIngredientAssignment_2_1.eContents().get(0);
		
		//Pantry:
		//	'Pantry:' ingredient+=Ingredient ("," ingredient+=Ingredient)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Pantry:' ingredient+=Ingredient ("," ingredient+=Ingredient)*
		public Group getGroup() { return cGroup; }
		
		//'Pantry:'
		public Keyword getPantryKeyword_0() { return cPantryKeyword_0; }
		
		//ingredient+=Ingredient
		public Assignment getIngredientAssignment_1() { return cIngredientAssignment_1; }
		
		//Ingredient
		public RuleCall getIngredientIngredientParserRuleCall_1_0() { return cIngredientIngredientParserRuleCall_1_0; }
		
		//("," ingredient+=Ingredient)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ingredient+=Ingredient
		public Assignment getIngredientAssignment_2_1() { return cIngredientAssignment_2_1; }
		
		//Ingredient
		public RuleCall getIngredientIngredientParserRuleCall_2_1_0() { return cIngredientIngredientParserRuleCall_2_1_0; }
	}
	public class IngredientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.PantryTextual.Ingredient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIngredientAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMassMassParserRuleCall_2_1_0 = (RuleCall)cMassAssignment_2_1.eContents().get(0);
		
		//Ingredient:
		//	{Ingredient} name=EString (':' mass=Mass)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Ingredient} name=EString (':' mass=Mass)?
		public Group getGroup() { return cGroup; }
		
		//{Ingredient}
		public Action getIngredientAction_0() { return cIngredientAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//(':' mass=Mass)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//mass=Mass
		public Assignment getMassAssignment_2_1() { return cMassAssignment_2_1; }
		
		//Mass
		public RuleCall getMassMassParserRuleCall_2_1_0() { return cMassMassParserRuleCall_2_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.PantryTextual.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class MassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.PantryTextual.Mass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAmountKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAmountAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAmountEFloatParserRuleCall_2_1_0 = (RuleCall)cAmountAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUnitKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cUnitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_3_1_0 = (RuleCall)cUnitAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Mass:
		//	{Mass}
		//	'{' ('amount' amount=EFloat)? ('unit' unit=EString)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mass} '{' ('amount' amount=EFloat)? ('unit' unit=EString)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Mass}
		public Action getMassAction_0() { return cMassAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('amount' amount=EFloat)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'amount'
		public Keyword getAmountKeyword_2_0() { return cAmountKeyword_2_0; }
		
		//amount=EFloat
		public Assignment getAmountAssignment_2_1() { return cAmountAssignment_2_1; }
		
		//EFloat
		public RuleCall getAmountEFloatParserRuleCall_2_1_0() { return cAmountEFloatParserRuleCall_2_1_0; }
		
		//('unit' unit=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'unit'
		public Keyword getUnitKeyword_3_0() { return cUnitKeyword_3_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_3_1() { return cUnitAssignment_3_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_3_1_0() { return cUnitEStringParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.PantryTextual.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat ecore::EFloat:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	
	private final PantryElements pPantry;
	private final IngredientElements pIngredient;
	private final EStringElements pEString;
	private final MassElements pMass;
	private final EFloatElements pEFloat;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PantryTextualGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPantry = new PantryElements();
		this.pIngredient = new IngredientElements();
		this.pEString = new EStringElements();
		this.pMass = new MassElements();
		this.pEFloat = new EFloatElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.example.PantryTextual".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Pantry:
	//	'Pantry:' ingredient+=Ingredient ("," ingredient+=Ingredient)*;
	public PantryElements getPantryAccess() {
		return pPantry;
	}
	
	public ParserRule getPantryRule() {
		return getPantryAccess().getRule();
	}
	
	//Ingredient:
	//	{Ingredient} name=EString (':' mass=Mass)?;
	public IngredientElements getIngredientAccess() {
		return pIngredient;
	}
	
	public ParserRule getIngredientRule() {
		return getIngredientAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Mass:
	//	{Mass}
	//	'{' ('amount' amount=EFloat)? ('unit' unit=EString)?
	//	'}';
	public MassElements getMassAccess() {
		return pMass;
	}
	
	public ParserRule getMassRule() {
		return getMassAccess().getRule();
	}
	
	//EFloat ecore::EFloat:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
