/*
 * generated by Xtext 2.23.0
 */
package org.example.serializer;

import MyPantry.Ingredient;
import MyPantry.Mass;
import MyPantry.MyPantryPackage;
import MyPantry.Pantry;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.example.services.PantryTextualGrammarAccess;

@SuppressWarnings("all")
public class PantryTextualSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PantryTextualGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyPantryPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyPantryPackage.INGREDIENT:
				sequence_Ingredient(context, (Ingredient) semanticObject); 
				return; 
			case MyPantryPackage.MASS:
				sequence_Mass(context, (Mass) semanticObject); 
				return; 
			case MyPantryPackage.PANTRY:
				sequence_Pantry(context, (Pantry) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Ingredient returns Ingredient
	 *
	 * Constraint:
	 *     (name=EString mass=Mass?)
	 */
	protected void sequence_Ingredient(ISerializationContext context, Ingredient semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mass returns Mass
	 *
	 * Constraint:
	 *     (amount=EFloat? unit=EString?)
	 */
	protected void sequence_Mass(ISerializationContext context, Mass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pantry returns Pantry
	 *
	 * Constraint:
	 *     (ingredient+=Ingredient ingredient+=Ingredient*)
	 */
	protected void sequence_Pantry(ISerializationContext context, Pantry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
