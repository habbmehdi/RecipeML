/*
 * generated by Xtext 2.23.0
 */
grammar InternalPantryTextual;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.example.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.example.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.example.services.PantryTextualGrammarAccess;

}

@parser::members {

 	private PantryTextualGrammarAccess grammarAccess;

    public InternalPantryTextualParser(TokenStream input, PantryTextualGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Pantry";
   	}

   	@Override
   	protected PantryTextualGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePantry
entryRulePantry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPantryRule()); }
	iv_rulePantry=rulePantry
	{ $current=$iv_rulePantry.current; }
	EOF;

// Rule Pantry
rulePantry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Pantry:'
		{
			newLeafNode(otherlv_0, grammarAccess.getPantryAccess().getPantryKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPantryAccess().getIngredientIngredientParserRuleCall_1_0());
				}
				lv_ingredient_1_0=ruleIngredient
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPantryRule());
					}
					add(
						$current,
						"ingredient",
						lv_ingredient_1_0,
						"org.example.PantryTextual.Ingredient");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getPantryAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPantryAccess().getIngredientIngredientParserRuleCall_2_1_0());
					}
					lv_ingredient_3_0=ruleIngredient
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPantryRule());
						}
						add(
							$current,
							"ingredient",
							lv_ingredient_3_0,
							"org.example.PantryTextual.Ingredient");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleIngredient
entryRuleIngredient returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIngredientRule()); }
	iv_ruleIngredient=ruleIngredient
	{ $current=$iv_ruleIngredient.current; }
	EOF;

// Rule Ingredient
ruleIngredient returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIngredientAccess().getIngredientAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIngredientAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIngredientRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.example.PantryTextual.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getIngredientAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIngredientAccess().getMassMassParserRuleCall_2_1_0());
					}
					lv_mass_3_0=ruleMass
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIngredientRule());
						}
						set(
							$current,
							"mass",
							lv_mass_3_0,
							"org.example.PantryTextual.Mass");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleMass
entryRuleMass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMassRule()); }
	iv_ruleMass=ruleMass
	{ $current=$iv_ruleMass.current; }
	EOF;

// Rule Mass
ruleMass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMassAccess().getMassAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMassAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='amount'
			{
				newLeafNode(otherlv_2, grammarAccess.getMassAccess().getAmountKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMassAccess().getAmountEFloatParserRuleCall_2_1_0());
					}
					lv_amount_3_0=ruleEFloat
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMassRule());
						}
						set(
							$current,
							"amount",
							lv_amount_3_0,
							"org.example.PantryTextual.EFloat");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_4='unit'
			{
				newLeafNode(otherlv_4, grammarAccess.getMassAccess().getUnitKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMassAccess().getUnitEStringParserRuleCall_3_1_0());
					}
					lv_unit_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMassRule());
						}
						set(
							$current,
							"unit",
							lv_unit_5_0,
							"org.example.PantryTextual.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getMassAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEFloat
entryRuleEFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEFloatRule()); }
	iv_ruleEFloat=ruleEFloat
	{ $current=$iv_ruleEFloat.current.getText(); }
	EOF;

// Rule EFloat
ruleEFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEFloatAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_3());
		}
		(
			(
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_0());
				}
				    |
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_4_1());
				}
			)?
			this_INT_7=RULE_INT
			{
				$current.merge(this_INT_7);
			}
			{
				newLeafNode(this_INT_7, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_4_2());
			}
		)?
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
