/*
 * generated by Xtext 2.23.0
 */
package org.textual.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.textual.ide.contentassist.antlr.internal.InternalRecipeMLParser;
import org.textual.services.RecipeMLGrammarAccess;

public class RecipeMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RecipeMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RecipeMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getIngredientAccess().getAlternatives(), "rule__Ingredient__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEFloatAccess().getAlternatives_4_0(), "rule__EFloat__Alternatives_4_0");
			builder.put(grammarAccess.getRecipeAccess().getGroup(), "rule__Recipe__Group__0");
			builder.put(grammarAccess.getRecipeAccess().getGroup_7(), "rule__Recipe__Group_7__0");
			builder.put(grammarAccess.getRecipeAccess().getGroup_10(), "rule__Recipe__Group_10__0");
			builder.put(grammarAccess.getBaseIngAccess().getGroup(), "rule__BaseIng__Group__0");
			builder.put(grammarAccess.getBaseIngAccess().getGroup_4(), "rule__BaseIng__Group_4__0");
			builder.put(grammarAccess.getBaseIngAccess().getGroup_5(), "rule__BaseIng__Group_5__0");
			builder.put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_2(), "rule__Method__Group_2__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_4(), "rule__Method__Group_4__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_4_2(), "rule__Method__Group_4_2__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_5(), "rule__Method__Group_5__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_6(), "rule__Method__Group_6__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_6_5(), "rule__Method__Group_6_5__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup(), "rule__EFloat__Group__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup_4(), "rule__EFloat__Group_4__0");
			builder.put(grammarAccess.getAmountAccess().getGroup(), "rule__Amount__Group__0");
			builder.put(grammarAccess.getAmountAccess().getGroup_1(), "rule__Amount__Group_1__0");
			builder.put(grammarAccess.getAmountAccess().getGroup_2(), "rule__Amount__Group_2__0");
			builder.put(grammarAccess.getModIngAccess().getGroup(), "rule__ModIng__Group__0");
			builder.put(grammarAccess.getModIngAccess().getGroup_4(), "rule__ModIng__Group_4__0");
			builder.put(grammarAccess.getModIngAccess().getGroup_5(), "rule__ModIng__Group_5__0");
			builder.put(grammarAccess.getRecipeAccess().getNameAssignment_1(), "rule__Recipe__NameAssignment_1");
			builder.put(grammarAccess.getRecipeAccess().getServesAssignment_4(), "rule__Recipe__ServesAssignment_4");
			builder.put(grammarAccess.getRecipeAccess().getBaseingsAssignment_6(), "rule__Recipe__BaseingsAssignment_6");
			builder.put(grammarAccess.getRecipeAccess().getBaseingsAssignment_7_1(), "rule__Recipe__BaseingsAssignment_7_1");
			builder.put(grammarAccess.getRecipeAccess().getMethodsAssignment_9(), "rule__Recipe__MethodsAssignment_9");
			builder.put(grammarAccess.getRecipeAccess().getMethodsAssignment_10_1(), "rule__Recipe__MethodsAssignment_10_1");
			builder.put(grammarAccess.getBaseIngAccess().getNameAssignment_2(), "rule__BaseIng__NameAssignment_2");
			builder.put(grammarAccess.getBaseIngAccess().getCountAssignment_4_1(), "rule__BaseIng__CountAssignment_4_1");
			builder.put(grammarAccess.getBaseIngAccess().getUnitAssignment_5_1(), "rule__BaseIng__UnitAssignment_5_1");
			builder.put(grammarAccess.getMethodAccess().getStepAssignment_2_1(), "rule__Method__StepAssignment_2_1");
			builder.put(grammarAccess.getMethodAccess().getNameAssignment_3(), "rule__Method__NameAssignment_3");
			builder.put(grammarAccess.getMethodAccess().getUsesAssignment_4_1(), "rule__Method__UsesAssignment_4_1");
			builder.put(grammarAccess.getMethodAccess().getUsesAssignment_4_2_1(), "rule__Method__UsesAssignment_4_2_1");
			builder.put(grammarAccess.getMethodAccess().getTimeAssignment_5_1(), "rule__Method__TimeAssignment_5_1");
			builder.put(grammarAccess.getMethodAccess().getCreatesAssignment_6_4(), "rule__Method__CreatesAssignment_6_4");
			builder.put(grammarAccess.getMethodAccess().getCreatesAssignment_6_5_1(), "rule__Method__CreatesAssignment_6_5_1");
			builder.put(grammarAccess.getAmountAccess().getQuantityAssignment_1_1(), "rule__Amount__QuantityAssignment_1_1");
			builder.put(grammarAccess.getAmountAccess().getUnitAssignment_2_1(), "rule__Amount__UnitAssignment_2_1");
			builder.put(grammarAccess.getAmountAccess().getAmountofAssignment_4(), "rule__Amount__AmountofAssignment_4");
			builder.put(grammarAccess.getModIngAccess().getNameAssignment_2(), "rule__ModIng__NameAssignment_2");
			builder.put(grammarAccess.getModIngAccess().getCountAssignment_4_1(), "rule__ModIng__CountAssignment_4_1");
			builder.put(grammarAccess.getModIngAccess().getUnitAssignment_5_1(), "rule__ModIng__UnitAssignment_5_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RecipeMLGrammarAccess grammarAccess;

	@Override
	protected InternalRecipeMLParser createParser() {
		InternalRecipeMLParser result = new InternalRecipeMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RecipeMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RecipeMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
